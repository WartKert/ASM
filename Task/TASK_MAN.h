/*************************************************************************************************************************
"Delay.h" - содержит описание работы функции паузы. Для работы необходимо включение таймера №7 в "system_stm32l1xx.h".
Запись функции:  Pause(time); - где "time" является переменной задающая время паузы в мкс.

Дата составления: 11.04.12
Автор: RUS_SERV
***************************************************************************************************************************/
#ifndef Delay_H
//#include "Graf_LCD.h"
//	 #include "system_stm32l1xx.h"
//#include "stm32l1xx.h"


//#include "system_stm32l1xx.h"



	#define TIM7_SYS_CLK						(10000/ ( ((SYS_CLK / 2) / (DIV_TIM7+1)) / 100000 ) )
/***************************************************************************************************************************/
/*    ОБЪЯВЛЕНИЕ ПЕРЕМЕННЫХ     */
//	int goto_First_cycle = 1;									// переменная по которой определяется начало выполнения функции Pause
//	register  int CountPC __asm("pc");							// переменная регистра R15 - Count program
//extern void (*return_to_first_cycle)(void);
/*extern struct OptionsTasks *StrTasks;
extern char CurrentTask;
extern short FlagDelayTask;
extern short FlagMask_Run_or_Stop_Task;
extern unsigned long NextPointerStackTASK;
extern char high;
extern char CountPause;
extern char current_task;
extern unsigned long **Low_Time;
extern unsigned short count_us_TIME;
extern unsigned long *AdrsdelData[2][3];
extern unsigned short Choice_old_Task;*/





extern unsigned long begin;

/***************************************************************************************************************************/
/*    ФУНКЦИЯ ОБРАБОТКИ ПРЕРЫВАНИЯ ПО ТАЙМЕРУ №7     */
extern void TIM7_IRQHandler (void);

 /******************************************************************************/
//      ФУНКЦИЯ ОБРАБОТКИ ПРЕРЫВАНИЯ ПО ТАЙМЕРУ №6: ВРЕМЯ ПЕРЕКЛЮЧЕНИЯ
//                                      ЗАДАЧ
extern void TIM6_IRQHandler (void);

/***************************************************************************************************************************/
/*    ФУНКЦИЯ РАСЧЁТА ВРЕМЕННОЙ ПАУЗЫ     */
extern void TaskDelay_us (unsigned short  u_secunda);
/***************************************************************************************************************************/
/*    ФУНКЦИЯ РАСЧЁТА ВРЕМЕННОЙ ПАУЗЫ миллисекундах     */
extern void TaskDelay_ms (unsigned short  m_secunda);
/***************************************************************************************************************************/
/*    ФУНКЦИЯ ПЕРЕХОДА НА ОСНОВНОЙ ЦИКЛ     */
//      ФУНКЦИЯ СОЗДАНИЯ ЗАДАЧ
extern void Task_create (void (*tsk)(), char prior);
/******************************************************************************/
//      ФУНКЦИЯ ДИСПЕТЧЕРА ЗАДАЧ
extern void Task_Manager (unsigned long *p);
/******************************************************************************/
//      ФУНКЦИЯ ИНИЦИАЛИЗАЦИИ ДИСПЕТЧЕРА ЗАДАЧ
extern void Init_Task_Manager();
/******************************************************************************/
//      ФУНКЦИЯ СТАРТА РАБОТЫ ДИСПЕТЧЕРА ЗАДАЧ
extern void Start_Task_Manager();
/******************************************************************************/
extern unsigned long Mem_Choice_to_Task(char number);
/******************************************************************************/
/*    ФУНКЦИЯ ОЖИДАНИЕ ПЕРЕМЕННОЙ     */
extern void del_Data (void *data);
/******************************************************************************/
/*    ФУНКЦИЯ ЗАПИСИ ПЕРЕМЕННОЙ     */
extern void wr_data(void *adrs_var, unsigned long data_write, char ch_task);
/******************************************************************************/
//      ФУНКЦИЯ УДАЛЕНИЯ ЗАДАЧИ
//extern void Task_Delete(unsigned long delStructTask);



#endif
